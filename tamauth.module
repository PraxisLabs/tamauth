<?php
/**
 * @file
 *   Tivoli Access Manager (TAM) Authentication module functions.
 */

module_load_include('inc', 'user', 'user.pages');

/**
 * Implements hook_menu().
 */
function tamauth_menu() {
  $items['user/tam'] = array(
    'title' => 'TAM Authentication',
    'page callback' => 'tamauth_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Page Callback
 *
 * Delegte to tam processes and redirect.
 */
function tamauth_page() {
  global $user;

  $name = tamauth_get_tam_name_header();
  $roles = tamauth_get_tam_groups_header();
  $user = user_load_by_name($name);
  $role_map = variable_get('tamauth_map_roles', array());
  $roles_valid = (bool) count(array_intersect($roles, array_keys($role_map)));

  if (!$name || !$roles_valid) {
    watchdog('tamauth', implode(' ', array(t('Incomplete headers'), serialize($name), serialize($roles))));
    drupal_add_http_header('Status', '400 Bad Request');
    echo t("Nice try...");
    drupal_exit();
  }
  else if (tamauth_user_is_not_tam($name)) {
    watchdog('tamauth', t('Page callback: @name is not an authorised TAM user', array('@name' => $name)));
    drupal_add_http_header('Status', '403 Forbidden');
    drupal_access_denied();
    drupal_exit();
  }

  user_external_login_register($name, 'tamauth');
  tamauth_set_roles($user, tamauth_map_roles($roles));
  drupal_goto(variable_get('tamauth_redirect', 'admin'));
}

/**
 * Set the roles for the tam user.
 *
 * @param DrupalUser
 *  $account The drupal user account.
 * @param Array
 *  $tam_roles List of roles to apply to the user.
 */
function tamauth_set_roles($account, $tam_roles = array()) {
  $user_roles = user_roles();

  //Revoke
  foreach ($account->roles as $rid => $name) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      unset($account->roles[$rid]);
    }
  }
  
  //Grant
  foreach ($user_roles as $rid => $name) {
    if (in_array($name, $tam_roles)) {
      $account->roles[$rid] = $name;
    }
  }
  
  user_save($account);
}

/**
 * Implement hook_form_alter()
 */
function tamauth_form_user_login_alter(&$form, &$form_state, $form_id) {
  array_unshift($form['#submit'], 'tamauth_validate_login');
}

/**
 * Validate user login
 *
 * If the user can authenticate with TAM, they are prevented from logging in with a username and password.
 */
function tamauth_validate_login($form, &$form_state) {
  $name = $form_state['values']['name'];
  if (tamauth_is_tam_user($name)) {
    watchdog('tamauth', t('User @user attempted log in through web form.', array('@user' => $name)));
    drupal_goto();
  }
}

/**
 * Determines if a user can authenticate using TAM.
 *
 * @param string
 *   The username of the user to check.
 * @return bool
 *   Is the this is a TAM user?
 */
function tamauth_is_tam_user($name) {
  return user_get_authmaps($name) && in_array('tamauth', array_keys(user_get_authmaps($name)));
}

/**
 * Determine if a user exists but can't authenticate with TAM.
 *
 * @param string
 *   The username of the user to check.
 * @return bool
 *   Does the user exist and is not a TAM user?
 */
function tamauth_user_is_not_tam($name) {
  $result = db_query('SELECT 1 FROM {users} u WHERE u.name = :name', array(':name' => $name))->fetch();
  return $result ? !tamauth_is_tam_user($name) : FALSE;
}

/**
 * Fetch the value of the TAM user header.
 *
 * @return string
 *   The username in the header of FALSE if empty or not found.
 */
function tamauth_get_tam_name_header() {
  return !empty($_SERVER['HTTP_IV_USER']) ? $_SERVER['HTTP_IV_USER'] : FALSE;
}

/**
 * Fetches the TAM groups header as an Array.
 *
 * @return Array
 *  List of group names in the header.
 */
function tamauth_get_tam_groups_header() {
  $groups = array();
  if (!empty($_SERVER['HTTP_IV_GROUPS'])) {
    $groups = explode(',', $_SERVER['HTTP_IV_GROUPS']);
  }
  return $groups;
}

/**
 * Maps TAM roles to drupal roles;
 *
 * @param Array
 *   $tam_roles List of TAM roles to be mapped.
 * @return Array
 *   List of valid drupal groups.
 */
function tamauth_map_roles($tam_roles) {
  $map = variable_get('tamauth_map_roles', array());
  $drupal_roles = array();
  foreach ($tam_roles as $role) {
    if (isset($map[$role])) {
      $drupal_roles[] = $map[$role];
    }
  }
  return $drupal_roles;
}
